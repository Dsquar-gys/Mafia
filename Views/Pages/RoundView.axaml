<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:models="clr-namespace:Mafia.Models"
             xmlns:converters="clr-namespace:Mafia.Converters"
             xmlns:pages="clr-namespace:Mafia.ViewModels.Pages"
             xmlns:views="clr-namespace:Mafia.Views.Pages"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="Mafia.Views.Pages.RoundView"
             x:DataType="pages:RoundViewModel">

	<UserControl.Resources>
		<converters:RoleColorBrushConverter x:Key="RoleColorBrushConverter" />
	</UserControl.Resources>
	<Design.DataContext>
        <pages:RoundViewModel />
    </Design.DataContext>
    
    <!-- Body -->
		<Border Background="{StaticResource LightBlue}">
			
			<Grid>
                
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" MinWidth="670" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="Auto" MinWidth="200" />
				</Grid.ColumnDefinitions>
                
				<!-- Splitters -->
				<GridSplitter Grid.Column="1" />
				
				<!-- Content -->
				<ListBox Grid.Column="0"
				         Name="PlayersList"
				         ItemsSource="{Binding Players}"
				         AutoScrollToSelectedItem="False"
				         Background="Transparent"
				         SelectedValue="{Binding CurrentPlayer, Mode=OneWay}">
					
					<Interaction.Behaviors>
						<EventTriggerBehavior EventName="SelectionChanged">
							<ChangePropertyAction PropertyName="SelectedValue"
							                          Value="{Binding CurrentPlayer}"/>
						</EventTriggerBehavior>
					</Interaction.Behaviors>
					
					<ListBox.ItemTemplate>
						<DataTemplate>
							<Grid ColumnDefinitions="*, Auto">
								<Border Grid.Column="0"
								        Background="White"
								        Padding="10"
								        Margin="0,5"
								        CornerRadius="10">
									<Grid ColumnDefinitions="Auto, *, *, 2*, Auto">
										<TextBlock Grid.Column="0"
										           Text="{Binding Position}"
										           VerticalAlignment="Center"
										           Margin="8,0"/>
										<TextBlock Grid.Column="1"
										           Text="{Binding Nickname}"
										           VerticalAlignment="Center"
										           HorizontalAlignment="Left"/>
										<Border Grid.Column="2"
										        CornerRadius="10"
										        Padding="10"
										        HorizontalAlignment="Left"
										        VerticalAlignment="Center"
										        Background="{Binding Role, Converter={StaticResource RoleColorBrushConverter}}">
											<TextBlock Text="{Binding Role}"
											           Foreground="White"/>
										</Border>
										<StackPanel Grid.Column="3"
										            Spacing="10"
										            Orientation="Horizontal">
											<Button Content="Foul"
											        Theme="{DynamicResource BorderlessButton}"
											        Classes="Danger"
											        IsEnabled="{Binding !IsMuted}"
											        Command="{Binding SetFoulCommand}"/>
											<TextBlock Tag="{Binding IsMuted}"
											           VerticalAlignment="Center"
											           HorizontalAlignment="Center"/>
											
											<StackPanel.Styles>
												<Style Selector="TextBlock[Tag=False]">
													<Setter Property="Text" Value="{Binding Fouls, StringFormat='Fouls: {0}'}" />
												</Style>
												<Style Selector="TextBlock[Tag=True]">
													<Setter Property="Text" Value="Muted" />
													<Setter Property="Foreground" Value="Red" />
												</Style>
											</StackPanel.Styles>
										</StackPanel>
										<Button Grid.Column="4"
										        Content="Kill"
										        Classes="Danger"
										        IsEnabled="{Binding $parent[views:RoundView].((pages:RoundViewModel)DataContext).NightStagePermission, FallbackValue=false}"
										        Command="{Binding KickCommand}" />
										
									</Grid>
								</Border>
								<Border Grid.Column="1"
								        Background="White"
								        Padding="10"
								        Margin="10,5"
								        CornerRadius="10">
									<RadioButton VerticalAlignment="Center"
									             Content="Nominated"
									             IsEnabled="{Binding Path=!$parent[views:RoundView].((pages:RoundViewModel)DataContext).NightStagePermission, FallbackValue=false}"
									             Command="{Binding NominateCommand}" />
								</Border>
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
					
					<ListBox.Styles>
						
						<!--  Selected state  -->
						<Style Selector="ListBoxItem:selected /template/ ContentPresenter">
							<Setter Property="Background" Value="LightSteelBlue" />
						</Style>
						<Style Selector="ListBoxItem">
							<Setter Property="IsEnabled" Value="{Binding !IsKickedOut, DataType=models:Player}" />
						</Style>
						<Style Selector="ListBoxItem[IsEnabled=False]">
							<Setter Property="Opacity" Value="0.5" />
						</Style>
						
					</ListBox.Styles>
					
				</ListBox>
				
				<!-- Side -->
				<Grid Grid.Column="2">
					
					<Grid.RowDefinitions>
						<RowDefinition Height="*" MinHeight="200" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" MinHeight="200" />
					</Grid.RowDefinitions>
					
					<!-- Splitter -->
					<GridSplitter Grid.Row="1" />
					
					<!-- Timer -->
					<StackPanel Grid.Row="0"
					            Orientation="Vertical"
					            HorizontalAlignment="Center"
					            VerticalAlignment="Center"
					            Spacing="10">
						<Border CornerRadius="5"
						        Background="White"
						        Padding="10">
							<TextBlock FontSize="50"
							           Text="{Binding TimeDisplay}"/>
						</Border>
						<Button Theme="{DynamicResource SolidButton}"
						        Classes="Success"
						        Name="PlayPause"
						        Content="Play"
						        IsEnabled="{Binding $parent[views:RoundView].((pages:RoundViewModel)DataContext).DayStagePermission, FallbackValue=false}"
						        Command="{Binding SwitchTimerCommand}"/>
						<Button Theme="{DynamicResource SolidButton}"
						        Classes="Secondary"
						        Content="Skip"
						        IsEnabled="{Binding !$parent[views:RoundView].((pages:RoundViewModel)DataContext).DayStagePermission, FallbackValue=false}"
						        Command="{Binding SwitchStageCommand}"/>
					</StackPanel>
					
					<!-- Candidates -->
					<Grid Grid.Row="2"
					      RowDefinitions="Auto, *">
						
						<TextBlock Grid.Row="0"
						           Foreground="White"
						           TextAlignment="Center"
						           Text="Nominated players"
						           Margin="0, 5"/>
						
						<ListBox Grid.Row="1"
						         ItemsSource="{Binding NominatedPlayers}">
							<ListBox.ItemTemplate>
								<DataTemplate>
									<Border Background="White"
									        Padding="10"
									        Margin="0,2"
									        CornerRadius="10">
									
										<Grid ColumnDefinitions="Auto, Auto, *">
											<TextBlock Grid.Column="0"
											           Text="{Binding Position}"
											           VerticalAlignment="Center"
											           Margin="8,0"/>
											<TextBlock Grid.Column="1"
											           Text="{Binding Nickname}"
											           VerticalAlignment="Center"
											           HorizontalAlignment="Center"/>
											<Button Grid.Column="2"
											        HorizontalAlignment="Right"
											        Content="Kick"
											        IsEnabled="{Binding $parent[views:RoundView].((pages:RoundViewModel)DataContext).VoteStagePermission, FallbackValue=false}"
											        Classes="Danger">
												
												<Interaction.Behaviors>
													<EventTriggerBehavior EventName="Click">
														<ChangePropertyAction TargetObject="{Binding .}" PropertyName="IsKickedOut" Value="true" />
													</EventTriggerBehavior>
												</Interaction.Behaviors>
												
											</Button>
										</Grid>
									
									</Border>
								</DataTemplate>
							</ListBox.ItemTemplate>
						
							<ListBox.Styles>
								<Style Selector="ListBoxItem:selected">
									<Setter Property="IsSelected" Value="False"/>
								</Style>
							</ListBox.Styles>
						
						</ListBox>
					</Grid>
					
				</Grid>
			</Grid>
			
		</Border>
    
</UserControl>
